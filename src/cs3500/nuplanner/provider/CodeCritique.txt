The code that the provider sent to our end had i design choices, and we were initially troubled
by the lack of interfaces. Event, User, Schedule, and a few other implementation classes lacked an
interface, and therefore we lacked the ability to adapt their view to our code. Another
insight was that there was a noticeable lack of throws indicated. Either in the interfaces or
in the specific implementations, error messages or other were not mentioned in detail or at
all. After some back and forth, a User interface was created, but was not implemented into the rest
of the code and therefore stood alone. This was the same for the event interface, as initially there
was no interface, and therefore no way to bridge the gap between our event and the one provided.

With regard to the rest of the code, there were many implementation specific items that stood out
that we lacked access to. There was a unique time class that we had no idea how to access or
implement as it was not given, and therefore we could not convert the start and end time of an event
 to work with our model.

