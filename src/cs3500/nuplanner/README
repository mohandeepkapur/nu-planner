HW 8 CHANGES MADE FOR CUSTOMERS:
====================================================================================================
- None!


HW 7 EXTRA CREDIT:
====================================================================================================
GUI is resizable. Thanks to using .getWidth() and .getHeight() rather than fixed values in View impl
when painting grid and drawing events in a user's Schedule.


For HW 8: AVAILABLE FEATURES WITH PROVIDER VIEW
====================================================================================================
The following features were possible:
1) Viewing schedules loaded in our model on their View (functionally proving success of adaptors)
2) Creating an event and adding it to multiple user schedules, and having that change reflect
   on their View
3) Viewing events that spanned single days
4) Interacting with View controls and having relevant windows pop up


For HW 8: UNAVAILABLE FEATURES WITH PROVIDER VIEW, --> REASONING IN PEER REVIEW
====================================================================================================
In summary, due to their design decisions and logic, we weren’t able to have the following features

(REASONING explained in detail in Peer Review!!!!):

1) Inability to view events that span multiple days
2) Inability to click on event displayed in current user’s schedule, and display its details
3) Inability to use remove/modify events via View, because of inability to access user event data
   (above point)
4) Inability to upload or download XML


DESIGN DECISIONS/CODEBASE OVERVIEW:
====================================================================================================
Within Scheduling System. the same Event object can be contained in multiple Schedules.
Internal aliasing is what allows for Events (and thus information)
to be shared between different users.

Two Event objects can be compared for equality if they share the same state. This is how the
Scheduling System accesses a specific Event within a Schedule.

A user of the System can identify a unique Event in a schedule through its start day and time.
This is due to the following INVARIANT: every Event contained WITHIN a Schedule NEVER CONFLICTS.
What constitutes a conflicting event was defined by Nunez, as non-overlapping Events (except if
end and start of event are same).

A Scheduling System is a collection of Schedules. If the above is enforced for a single Schedule,
the Scheduling System as a whole enforces that an Event WITHIN the Scheduling System NEVER CONFLICTS
with ANY Schedule the Event is related to (through its invitee list). The event-conflict
public method exists for this very purpose.

Since creating an XML file of a user's schedule can be interpreted as the View's job
(producing XML is essentially rendering the current state of the model aka scheduling system),
the conversion of an existing schedule to XML has been delegated to the View.

Since reading in an XML file to manipulate the state of the model according to "user" input (XML
itself) can be interpreted as the controller's job, creating or adding to user
schedule has been delegated to the Controller.

View accesses (Readable-only) Events through the Model. This allows for a one-way flow of info.
Observations on an Event have been put into a Readable-only Event interface, with the complete
Event interface (operations included) extending ReadableEvent.
        The View can anyways only access copies of the Events contained within the Scheduling System
        but the inclusion of the Readable interface prevents any developer working on the View
        to even attempt to manipulate an event and thus affect model-state.

Every component gives out a DEFENSIVE COPY of whatever it provides,
removing weird external aliasing dependencies.

GUI requests high level FEATURES from whatever implements features, in order to completely contain
View's implementation details. The essence of what Features does is permit the View to change its
state, and to manipulate model state. Changing model and view state is equivalent to the controller
job, thus controller implements the Features interface.

Some data sent over FEATURES is wrapped in RawEventData. This is the RAW user input encapsulated
into a class. The purpose is so the controller can take responsibility for parsing + interpreting
user input vs the View.

The SSGUIView is the Main View that takes in a Readable model and is given to Controller, and allows
the user to view multiple schedules, interact with existing events, upload and download schedules,
and create new events.

EventView and ScheduleEventView are created and destroyed within the overarching SSGUIView Interface

A EventView IS-A ScheduleEventView. A ScheduleEventView allows the current user to AUTOMATICALLY
schedule an Event for specified invitees. A EventView allows the current user to MANUALLY schedule
an Event for specified Invitees.

In the EventView, the user must place information into the given text boxes and then request
their desired action. To add multiple users to a new event, the user must select multiple users
in the Available Users box. To remove attending users from an existing event, the user must select
the multiple attending users in the same box (and press modify).
In the EventView, the host of an existing event user clicks on is highlighted green,
while the non-host members are highlighted blue.

COMMAND-LINE ARGS:
====================================================================================================
User can select whether to use provider or default View using first command-line argument:
    - "default" for default View
    - "provider" for provider View
User can select which scheduling strategy to use  as the first argument.
    - "workhours"
    - "anytime"
Use of scheduling strategy only compatible with default View!


KEY COMPONENTS (mentioned in overview, so this section kept brief):
====================================================================================================
The SSView interacts with the Scheduling System to render a user's Schedule using Events,
in either XML or text format.
The SSController is to manipulate the Scheduling System with GUI input discussed above, or XMl
input.


SMALLER COMPONENTS:
====================================================================================================
DaysOfTheWeek is an enum used to keep track of the days for a 2-week span planner.
Time is used in only one spot. The rest of the code-base assumes it will be dealing with military
time (military time preserved by the Event itself right now).


SOURCE ORGANIZATION:
====================================================================================================
All components in src and test are contained within cs3500.nuplanner package.
All components relevant to GUI are in the cs3500.nuplanner.view.gui package.


CHANGES FOR HW 6:
====================================================================================================
Added observation method to ReadableEvent to check whether a given time is contained within an
Event's range. Observes state of Event.

Planning to change modifyEvent method signature of model interface to
modifyEvent(new Event1, new Event2) due to perceived limitations in current model design.

This is to allow a User to change multiple aspects of an Event at once.
Created Features interface and bare-bones controller. Brief reasoning given in Intro to Codebase.


CHANGES FOR HW 7:
====================================================================================================
- Behavior of an Event slightly modified -> an Event can now be intialized inviteeless (thus with
  no host) -> Event's host can change IF all invitees in Event are removed. Then first one added
  back into Event becomes new host.
- Scheduling System impl and other components create objects of compile-time type Event as expected,
  but impl type NUEvent
    - because the representation of time is coupled to an Event's impl (Time class most desireable
      in hindsight, yes) this means that in order to change the representation of time the system
      works with, one would need to code a new Event implementation, and then replace all instances
      in components where NUEvent is being instantiated with the new impl. Not ideal. Time should
      ideally be separate from Event.
- This is why a prototype Time class has been added into the codebase, to represent military time
    - It is used internally within our strategies as proof of concept.
    - No where else is the Time class used
- change modifyEvent signature to accept an entire event as modification request


CHANGES FOR HW 8:
====================================================================================================
- No changes made to HW7 codebase (except for some documentation tweaks)
- Adaptors added to connect provider-View to our (client) codebase
- pView faked out, thinks its at home huh? nope LOL. enemy territory


FOR TAs:
====================================================================================================
- Testing Controller using Model and View mocks in Test class.
- Using DownloadXML in GUI will save XMLs of current model-state in XMLFiles folder.
- Use command line args to select scheduling strategy, and view used:
    - first argument:
- Command line now supports a second argument that selects between default (client) or provider view
- As before, first arg decides strategy (only compatible with default view)


INITIAL REASONING FOR NOT IMPLEMENTING TIME CLASS AFTER TA FEEDBACK:
However as justification for no time class, an Event itself ensures that the time used to construct
it is in military time. Once an Event is instantiated, it can only represent time in military time.
Any start-time provided by user that IS NOT MILITARY TIME will cause the relevant Event to throw an
IllegalArgException. Any times passed between components will be extracted from existing Events
that have proper military time, or rejected by an Event due to improper military time.
Summary: The Event implementation ITSELF ENFORCES MILITARY TIME.


====================================================================================================
- Will be refactoring Scheduling System addEvent and eventConflict method to only accept an Event
rather than parameters than construct an Event, because it feels like data representation of an
Event is being rigidly defined/leaked in Scheduling System interface. This change would not take
long because of my codebase design,
but this refactor is being prevented due to the numerous tests written with the current
addEvent + eventConflict method signature and time constraint.)