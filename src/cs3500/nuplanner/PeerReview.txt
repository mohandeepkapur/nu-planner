Peer Review:

The tenets of good object oriented design are: low coupling, high cohesion, and use of abstractions.
Our provider’s codebase displayed low cohesion, a lack of abstractions, and other questionable
design decisions.

Let’s begin with their lack of abstractions: initially, in their code-base, they had no interfaces
for multiple classes (an Event, a User, and a Schedule). The most important step before implementing
a component, is defining the behavior of that component (what the thing can do). This is
accomplished through interface design. Our providers ignored that step, and chose to use
implementation-specific types throughout their codebase. Unfortunately, this leads to inflexible,
stiff code. Code that relies on one specific class, rather than an interface.

Their code’s inflexibility immediately reared its head. Adapting their View to work with our
codebase could only work if their View relied on what an Event, Schedule, and User could do, rather
than the specific class Event, Schedule, and User. We had to ask them to refactor their code
multiple times to create and integrate the desired interfaces. A positive: our providers were nice,
responsive, and made the changes we requested! They developed interfaces IEvent, ISchedule, and
IUser, so we could adapt their View.

Let’s talk about their low cohesion now. To provide an example, their model-relevant components
(ISchedule and IUser) were responsible for parsing XML data. It’s not the job of a model-relevant
component to deal with input/output; that is strictly a controller’s responsibility. Thus, our
ISchedule and IUser adaptors could not fulfill XML-specific behavior of those components, because
our ISchedule and IUser equivalent components do not deal with XML, as they shouldn’t.

Another example: their View parses user input and creates IEvents (which it sends to their
Features). Parsing/making sense of user input is again, strictly a controller’s job. (Because their
View parses user input, it also throws errors when that user input is unsatisfactory/invalid. For a
certain case, instead of displaying an error-message, they throw an unattended-for IAE in their
View, a bug that as customers, we couldn’t touch/fix).

In Features, amidst the high-level methods, our providers included a low-level method (whose name
defeats the purpose of the Features interface) called setListener(), which takes in the painted
IEvent a user clicks on, as input. The use of this low-level method is to give their controller
the responsibility to open an Event Frame, and then to populate it with given IEvent’s details.

However, this is again an example of a component not being given the right job! Their controller
should not be creating a new Event Frame, that is their View’s job. Because their controller takes
on the wrong responsibility, and our controller doesn’t, we weren’t able to implement the feature
of clicking on an existing event in their GUI to display its details.

Because our Controller does not instantiate View Frames (as it shouldn’t), and we cannot change our
code for this assignment, we cannot support this crucial feature, because of their low cohesion.

Thus, we weren’t able to test the modify event and remove event features necessary for a planner,
because their View didn’t take full responsibility of displaying an IEvent: their Controller did
half the work. And, in order to populate their controller-created Event Frame with IEvent details,
they used a public method not mentioned in their IView interface, which creates unwanted dependency
between their EventFrame-implementation and Controller.

Some design choices made by our providers were quite confusing. They had each Frame in their View
package implement the same IView interface. Every frame was considered the same, even though each
had distinct behaviors/purposes. They also provided no way to manipulate their View’s state through
IView except through refresh(), which repainted the week-long grid and events displayed on their
GUI. This meant, for certain user inputs, their View manipulated its own state immediately, rather
than requesting Features whether it could do so.

They also had a flaw regarding their drawing logic: I was able to verify that our
ClientToProviderEvent adaptors provide their View with the correctly-formatted IEvents it desires.
However, their View was unable to support drawing IEvents that spanned multiple-days, and because
we cannot touch their code, we weren’t able to support that feature.

Their documentation needed improvement as well: our providers didn’t specify the exceptions thrown
by any of their methods, and was quite vague sometimes (handleClick() javadoc).


In summary, due to their design decisions and logic, we weren’t able to have the following features
(This information is included in README):
1) Inability to view events that span multiple days
2) Inability to click on event displayed in current user’s schedule, and display its details
3) Inability to use remove/modify events via View, because of inability to access user event data
   (above point)
4) Inability to upload or download XML

The following features were possible:
1) Viewing pre-loaded schedules in our model (functionally proving success of adaptors)
2) Creating an event and adding it to multiple user schedules, and having that change reflect
   on their View
3) Viewing events that spanned single days
4) Interacting with View controls and having relevant windows pop up